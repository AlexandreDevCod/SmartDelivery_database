
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Companies
 * 
 */
export type Companies = {
  id: string
  name_company: string
  cnpj: string | null
  payments_methods: string[]
  imgProfile: string | null
  backgroundColor: string | null
  isSubiscriber: boolean
  phone: string
  email: string
  password: string
  address: string
  pixKey: string | null
  created_at: Date
}

/**
 * Model MenuOfCompanies
 * 
 */
export type MenuOfCompanies = {
  id: string
  title: string
  categoria: string | null
  price: string
  weight: string | null
  amount: string | null
  companiesId: string
  description: string
  created_at: Date
}

/**
 * Model Clients
 * 
 */
export type Clients = {
  id: string
  name: string
  email: string
  password: string
  phone: number
  created_at: Date
}

/**
 * Model Orders
 * 
 */
export type Orders = {
  id: string
  amount: string
  payment_method: string
  status: string
  order: Prisma.JsonValue[]
  amoutMoney: string
  address: string
  created_at: Date
  pixType: string | null
  paymentVoucher: string | null
  companiesId: string
  clientsId: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  email: string
  name_company: string | null
  companyId: string | null
  backgroundColor: string | null
  imgProfile: string | null
  created_at: Date
}

/**
 * Model OrdersFinished
 * 
 */
export type OrdersFinished = {
  id: string
  date: string
  amountOrders: number
  amountvalue: number
  companyId: string
  created_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.companies.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.companies.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.companies`: Exposes CRUD operations for the **Companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.CompaniesDelegate<GlobalReject>;

  /**
   * `prisma.menuOfCompanies`: Exposes CRUD operations for the **MenuOfCompanies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuOfCompanies
    * const menuOfCompanies = await prisma.menuOfCompanies.findMany()
    * ```
    */
  get menuOfCompanies(): Prisma.MenuOfCompaniesDelegate<GlobalReject>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **Clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.ClientsDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **Orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.OrdersDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.ordersFinished`: Exposes CRUD operations for the **OrdersFinished** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrdersFinisheds
    * const ordersFinisheds = await prisma.ordersFinished.findMany()
    * ```
    */
  get ordersFinished(): Prisma.OrdersFinishedDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Companies: 'Companies',
    MenuOfCompanies: 'MenuOfCompanies',
    Clients: 'Clients',
    Orders: 'Orders',
    Session: 'Session',
    OrdersFinished: 'OrdersFinished'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompaniesCountOutputType
   */


  export type CompaniesCountOutputType = {
    Menu: number
    Orders: number
  }

  export type CompaniesCountOutputTypeSelect = {
    Menu?: boolean
    Orders?: boolean
  }

  export type CompaniesCountOutputTypeGetPayload<S extends boolean | null | undefined | CompaniesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompaniesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompaniesCountOutputTypeArgs)
    ? CompaniesCountOutputType 
    : S extends { select: any } & (CompaniesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompaniesCountOutputType ? CompaniesCountOutputType[P] : never
  } 
      : CompaniesCountOutputType




  // Custom InputTypes

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompaniesCountOutputType
     */
    select?: CompaniesCountOutputTypeSelect | null
  }



  /**
   * Count Type ClientsCountOutputType
   */


  export type ClientsCountOutputType = {
    Orders: number
  }

  export type ClientsCountOutputTypeSelect = {
    Orders?: boolean
  }

  export type ClientsCountOutputTypeGetPayload<S extends boolean | null | undefined | ClientsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClientsCountOutputTypeArgs)
    ? ClientsCountOutputType 
    : S extends { select: any } & (ClientsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClientsCountOutputType ? ClientsCountOutputType[P] : never
  } 
      : ClientsCountOutputType




  // Custom InputTypes

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Companies
   */


  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesMinAggregateOutputType = {
    id: string | null
    name_company: string | null
    cnpj: string | null
    imgProfile: string | null
    backgroundColor: string | null
    isSubiscriber: boolean | null
    phone: string | null
    email: string | null
    password: string | null
    address: string | null
    pixKey: string | null
    created_at: Date | null
  }

  export type CompaniesMaxAggregateOutputType = {
    id: string | null
    name_company: string | null
    cnpj: string | null
    imgProfile: string | null
    backgroundColor: string | null
    isSubiscriber: boolean | null
    phone: string | null
    email: string | null
    password: string | null
    address: string | null
    pixKey: string | null
    created_at: Date | null
  }

  export type CompaniesCountAggregateOutputType = {
    id: number
    name_company: number
    cnpj: number
    payments_methods: number
    imgProfile: number
    backgroundColor: number
    isSubiscriber: number
    phone: number
    email: number
    password: number
    address: number
    pixKey: number
    created_at: number
    _all: number
  }


  export type CompaniesMinAggregateInputType = {
    id?: true
    name_company?: true
    cnpj?: true
    imgProfile?: true
    backgroundColor?: true
    isSubiscriber?: true
    phone?: true
    email?: true
    password?: true
    address?: true
    pixKey?: true
    created_at?: true
  }

  export type CompaniesMaxAggregateInputType = {
    id?: true
    name_company?: true
    cnpj?: true
    imgProfile?: true
    backgroundColor?: true
    isSubiscriber?: true
    phone?: true
    email?: true
    password?: true
    address?: true
    pixKey?: true
    created_at?: true
  }

  export type CompaniesCountAggregateInputType = {
    id?: true
    name_company?: true
    cnpj?: true
    payments_methods?: true
    imgProfile?: true
    backgroundColor?: true
    isSubiscriber?: true
    phone?: true
    email?: true
    password?: true
    address?: true
    pixKey?: true
    created_at?: true
    _all?: true
  }

  export type CompaniesAggregateArgs = {
    /**
     * Filter which Companies to aggregate.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type CompaniesGroupByArgs = {
    where?: CompaniesWhereInput
    orderBy?: Enumerable<CompaniesOrderByWithAggregationInput>
    by: CompaniesScalarFieldEnum[]
    having?: CompaniesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }


  export type CompaniesGroupByOutputType = {
    id: string
    name_company: string
    cnpj: string | null
    payments_methods: string[]
    imgProfile: string | null
    backgroundColor: string | null
    isSubiscriber: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey: string | null
    created_at: Date
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends CompaniesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type CompaniesSelect = {
    id?: boolean
    name_company?: boolean
    cnpj?: boolean
    payments_methods?: boolean
    imgProfile?: boolean
    backgroundColor?: boolean
    isSubiscriber?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    address?: boolean
    pixKey?: boolean
    created_at?: boolean
    Menu?: boolean | Companies$MenuArgs
    Orders?: boolean | Companies$OrdersArgs
    _count?: boolean | CompaniesCountOutputTypeArgs
  }


  export type CompaniesInclude = {
    Menu?: boolean | Companies$MenuArgs
    Orders?: boolean | Companies$OrdersArgs
    _count?: boolean | CompaniesCountOutputTypeArgs
  }

  export type CompaniesGetPayload<S extends boolean | null | undefined | CompaniesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Companies :
    S extends undefined ? never :
    S extends { include: any } & (CompaniesArgs | CompaniesFindManyArgs)
    ? Companies  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Menu' ? Array < MenuOfCompaniesGetPayload<S['include'][P]>>  :
        P extends 'Orders' ? Array < OrdersGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompaniesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompaniesArgs | CompaniesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Menu' ? Array < MenuOfCompaniesGetPayload<S['select'][P]>>  :
        P extends 'Orders' ? Array < OrdersGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompaniesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Companies ? Companies[P] : never
  } 
      : Companies


  type CompaniesCountArgs = 
    Omit<CompaniesFindManyArgs, 'select' | 'include'> & {
      select?: CompaniesCountAggregateInputType | true
    }

  export interface CompaniesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Companies that matches the filter.
     * @param {CompaniesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompaniesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompaniesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Companies'> extends True ? Prisma__CompaniesClient<CompaniesGetPayload<T>> : Prisma__CompaniesClient<CompaniesGetPayload<T> | null, null>

    /**
     * Find one Companies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompaniesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompaniesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompaniesFindUniqueOrThrowArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompaniesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompaniesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Companies'> extends True ? Prisma__CompaniesClient<CompaniesGetPayload<T>> : Prisma__CompaniesClient<CompaniesGetPayload<T> | null, null>

    /**
     * Find the first Companies that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompaniesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompaniesFindFirstOrThrowArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companiesWithIdOnly = await prisma.companies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompaniesFindManyArgs>(
      args?: SelectSubset<T, CompaniesFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompaniesGetPayload<T>>>

    /**
     * Create a Companies.
     * @param {CompaniesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
    **/
    create<T extends CompaniesCreateArgs>(
      args: SelectSubset<T, CompaniesCreateArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Create many Companies.
     *     @param {CompaniesCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const companies = await prisma.companies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompaniesCreateManyArgs>(
      args?: SelectSubset<T, CompaniesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Companies.
     * @param {CompaniesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
    **/
    delete<T extends CompaniesDeleteArgs>(
      args: SelectSubset<T, CompaniesDeleteArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Update one Companies.
     * @param {CompaniesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompaniesUpdateArgs>(
      args: SelectSubset<T, CompaniesUpdateArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Delete zero or more Companies.
     * @param {CompaniesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompaniesDeleteManyArgs>(
      args?: SelectSubset<T, CompaniesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompaniesUpdateManyArgs>(
      args: SelectSubset<T, CompaniesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {CompaniesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
    **/
    upsert<T extends CompaniesUpsertArgs>(
      args: SelectSubset<T, CompaniesUpsertArgs>
    ): Prisma__CompaniesClient<CompaniesGetPayload<T>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompaniesCountArgs>(
      args?: Subset<T, CompaniesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): Prisma.PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompaniesGroupByArgs['orderBy'] }
        : { orderBy?: CompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompaniesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Menu<T extends Companies$MenuArgs= {}>(args?: Subset<T, Companies$MenuArgs>): Prisma.PrismaPromise<Array<MenuOfCompaniesGetPayload<T>>| Null>;

    Orders<T extends Companies$OrdersArgs= {}>(args?: Subset<T, Companies$OrdersArgs>): Prisma.PrismaPromise<Array<OrdersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Companies base type for findUnique actions
   */
  export type CompaniesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies findUnique
   */
  export interface CompaniesFindUniqueArgs extends CompaniesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Companies findUniqueOrThrow
   */
  export type CompaniesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies base type for findFirst actions
   */
  export type CompaniesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }

  /**
   * Companies findFirst
   */
  export interface CompaniesFindFirstArgs extends CompaniesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Companies findFirstOrThrow
   */
  export type CompaniesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * Companies findMany
   */
  export type CompaniesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: Enumerable<CompaniesScalarFieldEnum>
  }


  /**
   * Companies create
   */
  export type CompaniesCreateArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * The data needed to create a Companies.
     */
    data: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
  }


  /**
   * Companies createMany
   */
  export type CompaniesCreateManyArgs = {
    /**
     * The data used to create many Companies.
     */
    data: Enumerable<CompaniesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Companies update
   */
  export type CompaniesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * The data needed to update a Companies.
     */
    data: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
    /**
     * Choose, which Companies to update.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies updateMany
   */
  export type CompaniesUpdateManyArgs = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompaniesUpdateManyMutationInput, CompaniesUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompaniesWhereInput
  }


  /**
   * Companies upsert
   */
  export type CompaniesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * The filter to search for the Companies to update in case it exists.
     */
    where: CompaniesWhereUniqueInput
    /**
     * In case the Companies found by the `where` argument doesn't exist, create a new Companies with this data.
     */
    create: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
    /**
     * In case the Companies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
  }


  /**
   * Companies delete
   */
  export type CompaniesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
    /**
     * Filter which Companies to delete.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies deleteMany
   */
  export type CompaniesDeleteManyArgs = {
    /**
     * Filter which Companies to delete
     */
    where?: CompaniesWhereInput
  }


  /**
   * Companies.Menu
   */
  export type Companies$MenuArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    where?: MenuOfCompaniesWhereInput
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithRelationInput>
    cursor?: MenuOfCompaniesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MenuOfCompaniesScalarFieldEnum>
  }


  /**
   * Companies.Orders
   */
  export type Companies$OrdersArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    where?: OrdersWhereInput
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    cursor?: OrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * Companies without action
   */
  export type CompaniesArgs = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompaniesInclude | null
  }



  /**
   * Model MenuOfCompanies
   */


  export type AggregateMenuOfCompanies = {
    _count: MenuOfCompaniesCountAggregateOutputType | null
    _min: MenuOfCompaniesMinAggregateOutputType | null
    _max: MenuOfCompaniesMaxAggregateOutputType | null
  }

  export type MenuOfCompaniesMinAggregateOutputType = {
    id: string | null
    title: string | null
    categoria: string | null
    price: string | null
    weight: string | null
    amount: string | null
    companiesId: string | null
    description: string | null
    created_at: Date | null
  }

  export type MenuOfCompaniesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    categoria: string | null
    price: string | null
    weight: string | null
    amount: string | null
    companiesId: string | null
    description: string | null
    created_at: Date | null
  }

  export type MenuOfCompaniesCountAggregateOutputType = {
    id: number
    title: number
    categoria: number
    price: number
    weight: number
    amount: number
    companiesId: number
    description: number
    created_at: number
    _all: number
  }


  export type MenuOfCompaniesMinAggregateInputType = {
    id?: true
    title?: true
    categoria?: true
    price?: true
    weight?: true
    amount?: true
    companiesId?: true
    description?: true
    created_at?: true
  }

  export type MenuOfCompaniesMaxAggregateInputType = {
    id?: true
    title?: true
    categoria?: true
    price?: true
    weight?: true
    amount?: true
    companiesId?: true
    description?: true
    created_at?: true
  }

  export type MenuOfCompaniesCountAggregateInputType = {
    id?: true
    title?: true
    categoria?: true
    price?: true
    weight?: true
    amount?: true
    companiesId?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type MenuOfCompaniesAggregateArgs = {
    /**
     * Filter which MenuOfCompanies to aggregate.
     */
    where?: MenuOfCompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuOfCompanies to fetch.
     */
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuOfCompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuOfCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuOfCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuOfCompanies
    **/
    _count?: true | MenuOfCompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuOfCompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuOfCompaniesMaxAggregateInputType
  }

  export type GetMenuOfCompaniesAggregateType<T extends MenuOfCompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuOfCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuOfCompanies[P]>
      : GetScalarType<T[P], AggregateMenuOfCompanies[P]>
  }




  export type MenuOfCompaniesGroupByArgs = {
    where?: MenuOfCompaniesWhereInput
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithAggregationInput>
    by: MenuOfCompaniesScalarFieldEnum[]
    having?: MenuOfCompaniesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuOfCompaniesCountAggregateInputType | true
    _min?: MenuOfCompaniesMinAggregateInputType
    _max?: MenuOfCompaniesMaxAggregateInputType
  }


  export type MenuOfCompaniesGroupByOutputType = {
    id: string
    title: string
    categoria: string | null
    price: string
    weight: string | null
    amount: string | null
    companiesId: string
    description: string
    created_at: Date
    _count: MenuOfCompaniesCountAggregateOutputType | null
    _min: MenuOfCompaniesMinAggregateOutputType | null
    _max: MenuOfCompaniesMaxAggregateOutputType | null
  }

  type GetMenuOfCompaniesGroupByPayload<T extends MenuOfCompaniesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MenuOfCompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuOfCompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuOfCompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], MenuOfCompaniesGroupByOutputType[P]>
        }
      >
    >


  export type MenuOfCompaniesSelect = {
    id?: boolean
    title?: boolean
    categoria?: boolean
    price?: boolean
    weight?: boolean
    amount?: boolean
    dataCompanies?: boolean | CompaniesArgs
    companiesId?: boolean
    description?: boolean
    created_at?: boolean
  }


  export type MenuOfCompaniesInclude = {
    dataCompanies?: boolean | CompaniesArgs
  }

  export type MenuOfCompaniesGetPayload<S extends boolean | null | undefined | MenuOfCompaniesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MenuOfCompanies :
    S extends undefined ? never :
    S extends { include: any } & (MenuOfCompaniesArgs | MenuOfCompaniesFindManyArgs)
    ? MenuOfCompanies  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dataCompanies' ? CompaniesGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MenuOfCompaniesArgs | MenuOfCompaniesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dataCompanies' ? CompaniesGetPayload<S['select'][P]> :  P extends keyof MenuOfCompanies ? MenuOfCompanies[P] : never
  } 
      : MenuOfCompanies


  type MenuOfCompaniesCountArgs = 
    Omit<MenuOfCompaniesFindManyArgs, 'select' | 'include'> & {
      select?: MenuOfCompaniesCountAggregateInputType | true
    }

  export interface MenuOfCompaniesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MenuOfCompanies that matches the filter.
     * @param {MenuOfCompaniesFindUniqueArgs} args - Arguments to find a MenuOfCompanies
     * @example
     * // Get one MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MenuOfCompaniesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MenuOfCompaniesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MenuOfCompanies'> extends True ? Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>> : Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T> | null, null>

    /**
     * Find one MenuOfCompanies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MenuOfCompaniesFindUniqueOrThrowArgs} args - Arguments to find a MenuOfCompanies
     * @example
     * // Get one MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MenuOfCompaniesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MenuOfCompaniesFindUniqueOrThrowArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Find the first MenuOfCompanies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesFindFirstArgs} args - Arguments to find a MenuOfCompanies
     * @example
     * // Get one MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MenuOfCompaniesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MenuOfCompaniesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MenuOfCompanies'> extends True ? Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>> : Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T> | null, null>

    /**
     * Find the first MenuOfCompanies that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesFindFirstOrThrowArgs} args - Arguments to find a MenuOfCompanies
     * @example
     * // Get one MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MenuOfCompaniesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MenuOfCompaniesFindFirstOrThrowArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Find zero or more MenuOfCompanies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findMany()
     * 
     * // Get first 10 MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuOfCompaniesWithIdOnly = await prisma.menuOfCompanies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MenuOfCompaniesFindManyArgs>(
      args?: SelectSubset<T, MenuOfCompaniesFindManyArgs>
    ): Prisma.PrismaPromise<Array<MenuOfCompaniesGetPayload<T>>>

    /**
     * Create a MenuOfCompanies.
     * @param {MenuOfCompaniesCreateArgs} args - Arguments to create a MenuOfCompanies.
     * @example
     * // Create one MenuOfCompanies
     * const MenuOfCompanies = await prisma.menuOfCompanies.create({
     *   data: {
     *     // ... data to create a MenuOfCompanies
     *   }
     * })
     * 
    **/
    create<T extends MenuOfCompaniesCreateArgs>(
      args: SelectSubset<T, MenuOfCompaniesCreateArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Create many MenuOfCompanies.
     *     @param {MenuOfCompaniesCreateManyArgs} args - Arguments to create many MenuOfCompanies.
     *     @example
     *     // Create many MenuOfCompanies
     *     const menuOfCompanies = await prisma.menuOfCompanies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MenuOfCompaniesCreateManyArgs>(
      args?: SelectSubset<T, MenuOfCompaniesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MenuOfCompanies.
     * @param {MenuOfCompaniesDeleteArgs} args - Arguments to delete one MenuOfCompanies.
     * @example
     * // Delete one MenuOfCompanies
     * const MenuOfCompanies = await prisma.menuOfCompanies.delete({
     *   where: {
     *     // ... filter to delete one MenuOfCompanies
     *   }
     * })
     * 
    **/
    delete<T extends MenuOfCompaniesDeleteArgs>(
      args: SelectSubset<T, MenuOfCompaniesDeleteArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Update one MenuOfCompanies.
     * @param {MenuOfCompaniesUpdateArgs} args - Arguments to update one MenuOfCompanies.
     * @example
     * // Update one MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MenuOfCompaniesUpdateArgs>(
      args: SelectSubset<T, MenuOfCompaniesUpdateArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Delete zero or more MenuOfCompanies.
     * @param {MenuOfCompaniesDeleteManyArgs} args - Arguments to filter MenuOfCompanies to delete.
     * @example
     * // Delete a few MenuOfCompanies
     * const { count } = await prisma.menuOfCompanies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MenuOfCompaniesDeleteManyArgs>(
      args?: SelectSubset<T, MenuOfCompaniesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuOfCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MenuOfCompaniesUpdateManyArgs>(
      args: SelectSubset<T, MenuOfCompaniesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MenuOfCompanies.
     * @param {MenuOfCompaniesUpsertArgs} args - Arguments to update or create a MenuOfCompanies.
     * @example
     * // Update or create a MenuOfCompanies
     * const menuOfCompanies = await prisma.menuOfCompanies.upsert({
     *   create: {
     *     // ... data to create a MenuOfCompanies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuOfCompanies we want to update
     *   }
     * })
    **/
    upsert<T extends MenuOfCompaniesUpsertArgs>(
      args: SelectSubset<T, MenuOfCompaniesUpsertArgs>
    ): Prisma__MenuOfCompaniesClient<MenuOfCompaniesGetPayload<T>>

    /**
     * Count the number of MenuOfCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesCountArgs} args - Arguments to filter MenuOfCompanies to count.
     * @example
     * // Count the number of MenuOfCompanies
     * const count = await prisma.menuOfCompanies.count({
     *   where: {
     *     // ... the filter for the MenuOfCompanies we want to count
     *   }
     * })
    **/
    count<T extends MenuOfCompaniesCountArgs>(
      args?: Subset<T, MenuOfCompaniesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuOfCompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuOfCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuOfCompaniesAggregateArgs>(args: Subset<T, MenuOfCompaniesAggregateArgs>): Prisma.PrismaPromise<GetMenuOfCompaniesAggregateType<T>>

    /**
     * Group by MenuOfCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuOfCompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuOfCompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuOfCompaniesGroupByArgs['orderBy'] }
        : { orderBy?: MenuOfCompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuOfCompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuOfCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuOfCompanies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MenuOfCompaniesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dataCompanies<T extends CompaniesArgs= {}>(args?: Subset<T, CompaniesArgs>): Prisma__CompaniesClient<CompaniesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MenuOfCompanies base type for findUnique actions
   */
  export type MenuOfCompaniesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter, which MenuOfCompanies to fetch.
     */
    where: MenuOfCompaniesWhereUniqueInput
  }

  /**
   * MenuOfCompanies findUnique
   */
  export interface MenuOfCompaniesFindUniqueArgs extends MenuOfCompaniesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MenuOfCompanies findUniqueOrThrow
   */
  export type MenuOfCompaniesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter, which MenuOfCompanies to fetch.
     */
    where: MenuOfCompaniesWhereUniqueInput
  }


  /**
   * MenuOfCompanies base type for findFirst actions
   */
  export type MenuOfCompaniesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter, which MenuOfCompanies to fetch.
     */
    where?: MenuOfCompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuOfCompanies to fetch.
     */
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuOfCompanies.
     */
    cursor?: MenuOfCompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuOfCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuOfCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuOfCompanies.
     */
    distinct?: Enumerable<MenuOfCompaniesScalarFieldEnum>
  }

  /**
   * MenuOfCompanies findFirst
   */
  export interface MenuOfCompaniesFindFirstArgs extends MenuOfCompaniesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MenuOfCompanies findFirstOrThrow
   */
  export type MenuOfCompaniesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter, which MenuOfCompanies to fetch.
     */
    where?: MenuOfCompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuOfCompanies to fetch.
     */
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuOfCompanies.
     */
    cursor?: MenuOfCompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuOfCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuOfCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuOfCompanies.
     */
    distinct?: Enumerable<MenuOfCompaniesScalarFieldEnum>
  }


  /**
   * MenuOfCompanies findMany
   */
  export type MenuOfCompaniesFindManyArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter, which MenuOfCompanies to fetch.
     */
    where?: MenuOfCompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuOfCompanies to fetch.
     */
    orderBy?: Enumerable<MenuOfCompaniesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuOfCompanies.
     */
    cursor?: MenuOfCompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuOfCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuOfCompanies.
     */
    skip?: number
    distinct?: Enumerable<MenuOfCompaniesScalarFieldEnum>
  }


  /**
   * MenuOfCompanies create
   */
  export type MenuOfCompaniesCreateArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * The data needed to create a MenuOfCompanies.
     */
    data: XOR<MenuOfCompaniesCreateInput, MenuOfCompaniesUncheckedCreateInput>
  }


  /**
   * MenuOfCompanies createMany
   */
  export type MenuOfCompaniesCreateManyArgs = {
    /**
     * The data used to create many MenuOfCompanies.
     */
    data: Enumerable<MenuOfCompaniesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MenuOfCompanies update
   */
  export type MenuOfCompaniesUpdateArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * The data needed to update a MenuOfCompanies.
     */
    data: XOR<MenuOfCompaniesUpdateInput, MenuOfCompaniesUncheckedUpdateInput>
    /**
     * Choose, which MenuOfCompanies to update.
     */
    where: MenuOfCompaniesWhereUniqueInput
  }


  /**
   * MenuOfCompanies updateMany
   */
  export type MenuOfCompaniesUpdateManyArgs = {
    /**
     * The data used to update MenuOfCompanies.
     */
    data: XOR<MenuOfCompaniesUpdateManyMutationInput, MenuOfCompaniesUncheckedUpdateManyInput>
    /**
     * Filter which MenuOfCompanies to update
     */
    where?: MenuOfCompaniesWhereInput
  }


  /**
   * MenuOfCompanies upsert
   */
  export type MenuOfCompaniesUpsertArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * The filter to search for the MenuOfCompanies to update in case it exists.
     */
    where: MenuOfCompaniesWhereUniqueInput
    /**
     * In case the MenuOfCompanies found by the `where` argument doesn't exist, create a new MenuOfCompanies with this data.
     */
    create: XOR<MenuOfCompaniesCreateInput, MenuOfCompaniesUncheckedCreateInput>
    /**
     * In case the MenuOfCompanies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuOfCompaniesUpdateInput, MenuOfCompaniesUncheckedUpdateInput>
  }


  /**
   * MenuOfCompanies delete
   */
  export type MenuOfCompaniesDeleteArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
    /**
     * Filter which MenuOfCompanies to delete.
     */
    where: MenuOfCompaniesWhereUniqueInput
  }


  /**
   * MenuOfCompanies deleteMany
   */
  export type MenuOfCompaniesDeleteManyArgs = {
    /**
     * Filter which MenuOfCompanies to delete
     */
    where?: MenuOfCompaniesWhereInput
  }


  /**
   * MenuOfCompanies without action
   */
  export type MenuOfCompaniesArgs = {
    /**
     * Select specific fields to fetch from the MenuOfCompanies
     */
    select?: MenuOfCompaniesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MenuOfCompaniesInclude | null
  }



  /**
   * Model Clients
   */


  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsAvgAggregateOutputType = {
    phone: number | null
  }

  export type ClientsSumAggregateOutputType = {
    phone: number | null
  }

  export type ClientsMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: number | null
    created_at: Date | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: number | null
    created_at: Date | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phone: number
    created_at: number
    _all: number
  }


  export type ClientsAvgAggregateInputType = {
    phone?: true
  }

  export type ClientsSumAggregateInputType = {
    phone?: true
  }

  export type ClientsMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    created_at?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    created_at?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    created_at?: true
    _all?: true
  }

  export type ClientsAggregateArgs = {
    /**
     * Filter which Clients to aggregate.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type ClientsGroupByArgs = {
    where?: ClientsWhereInput
    orderBy?: Enumerable<ClientsOrderByWithAggregationInput>
    by: ClientsScalarFieldEnum[]
    having?: ClientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _avg?: ClientsAvgAggregateInputType
    _sum?: ClientsSumAggregateInputType
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }


  export type ClientsGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    phone: number
    created_at: Date
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type ClientsSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    created_at?: boolean
    Orders?: boolean | Clients$OrdersArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }


  export type ClientsInclude = {
    Orders?: boolean | Clients$OrdersArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }

  export type ClientsGetPayload<S extends boolean | null | undefined | ClientsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Clients :
    S extends undefined ? never :
    S extends { include: any } & (ClientsArgs | ClientsFindManyArgs)
    ? Clients  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Orders' ? Array < OrdersGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClientsArgs | ClientsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Orders' ? Array < OrdersGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Clients ? Clients[P] : never
  } 
      : Clients


  type ClientsCountArgs = 
    Omit<ClientsFindManyArgs, 'select' | 'include'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface ClientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Clients that matches the filter.
     * @param {ClientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Clients'> extends True ? Prisma__ClientsClient<ClientsGetPayload<T>> : Prisma__ClientsClient<ClientsGetPayload<T> | null, null>

    /**
     * Find one Clients that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientsFindUniqueOrThrowArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Clients'> extends True ? Prisma__ClientsClient<ClientsGetPayload<T>> : Prisma__ClientsClient<ClientsGetPayload<T> | null, null>

    /**
     * Find the first Clients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientsFindFirstOrThrowArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientsFindManyArgs>(
      args?: SelectSubset<T, ClientsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClientsGetPayload<T>>>

    /**
     * Create a Clients.
     * @param {ClientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
    **/
    create<T extends ClientsCreateArgs>(
      args: SelectSubset<T, ClientsCreateArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Create many Clients.
     *     @param {ClientsCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const clients = await prisma.clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientsCreateManyArgs>(
      args?: SelectSubset<T, ClientsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {ClientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
    **/
    delete<T extends ClientsDeleteArgs>(
      args: SelectSubset<T, ClientsDeleteArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Update one Clients.
     * @param {ClientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientsUpdateArgs>(
      args: SelectSubset<T, ClientsUpdateArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Delete zero or more Clients.
     * @param {ClientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientsDeleteManyArgs>(
      args?: SelectSubset<T, ClientsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientsUpdateManyArgs>(
      args: SelectSubset<T, ClientsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {ClientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
    **/
    upsert<T extends ClientsUpsertArgs>(
      args: SelectSubset<T, ClientsUpsertArgs>
    ): Prisma__ClientsClient<ClientsGetPayload<T>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientsCountArgs>(
      args?: Subset<T, ClientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): Prisma.PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Orders<T extends Clients$OrdersArgs= {}>(args?: Subset<T, Clients$OrdersArgs>): Prisma.PrismaPromise<Array<OrdersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Clients base type for findUnique actions
   */
  export type ClientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients findUnique
   */
  export interface ClientsFindUniqueArgs extends ClientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clients findUniqueOrThrow
   */
  export type ClientsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }


  /**
   * Clients base type for findFirst actions
   */
  export type ClientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }

  /**
   * Clients findFirst
   */
  export interface ClientsFindFirstArgs extends ClientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clients findFirstOrThrow
   */
  export type ClientsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * Clients findMany
   */
  export type ClientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * Clients create
   */
  export type ClientsCreateArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * The data needed to create a Clients.
     */
    data: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
  }


  /**
   * Clients createMany
   */
  export type ClientsCreateManyArgs = {
    /**
     * The data used to create many Clients.
     */
    data: Enumerable<ClientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Clients update
   */
  export type ClientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * The data needed to update a Clients.
     */
    data: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
    /**
     * Choose, which Clients to update.
     */
    where: ClientsWhereUniqueInput
  }


  /**
   * Clients updateMany
   */
  export type ClientsUpdateManyArgs = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientsUpdateManyMutationInput, ClientsUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientsWhereInput
  }


  /**
   * Clients upsert
   */
  export type ClientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * The filter to search for the Clients to update in case it exists.
     */
    where: ClientsWhereUniqueInput
    /**
     * In case the Clients found by the `where` argument doesn't exist, create a new Clients with this data.
     */
    create: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
    /**
     * In case the Clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
  }


  /**
   * Clients delete
   */
  export type ClientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
    /**
     * Filter which Clients to delete.
     */
    where: ClientsWhereUniqueInput
  }


  /**
   * Clients deleteMany
   */
  export type ClientsDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientsWhereInput
  }


  /**
   * Clients.Orders
   */
  export type Clients$OrdersArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    where?: OrdersWhereInput
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    cursor?: OrdersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * Clients without action
   */
  export type ClientsArgs = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientsInclude | null
  }



  /**
   * Model Orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersMinAggregateOutputType = {
    id: string | null
    amount: string | null
    payment_method: string | null
    status: string | null
    amoutMoney: string | null
    address: string | null
    created_at: Date | null
    pixType: string | null
    paymentVoucher: string | null
    companiesId: string | null
    clientsId: string | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: string | null
    amount: string | null
    payment_method: string | null
    status: string | null
    amoutMoney: string | null
    address: string | null
    created_at: Date | null
    pixType: string | null
    paymentVoucher: string | null
    companiesId: string | null
    clientsId: string | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    amount: number
    payment_method: number
    status: number
    order: number
    amoutMoney: number
    address: number
    created_at: number
    pixType: number
    paymentVoucher: number
    companiesId: number
    clientsId: number
    _all: number
  }


  export type OrdersMinAggregateInputType = {
    id?: true
    amount?: true
    payment_method?: true
    status?: true
    amoutMoney?: true
    address?: true
    created_at?: true
    pixType?: true
    paymentVoucher?: true
    companiesId?: true
    clientsId?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    amount?: true
    payment_method?: true
    status?: true
    amoutMoney?: true
    address?: true
    created_at?: true
    pixType?: true
    paymentVoucher?: true
    companiesId?: true
    clientsId?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    amount?: true
    payment_method?: true
    status?: true
    order?: true
    amoutMoney?: true
    address?: true
    created_at?: true
    pixType?: true
    paymentVoucher?: true
    companiesId?: true
    clientsId?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which Orders to aggregate.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs = {
    where?: OrdersWhereInput
    orderBy?: Enumerable<OrdersOrderByWithAggregationInput>
    by: OrdersScalarFieldEnum[]
    having?: OrdersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    id: string
    amount: string
    payment_method: string
    status: string
    order: JsonValue[]
    amoutMoney: string
    address: string
    created_at: Date
    pixType: string | null
    paymentVoucher: string | null
    companiesId: string
    clientsId: string
    _count: OrdersCountAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type OrdersSelect = {
    id?: boolean
    amount?: boolean
    payment_method?: boolean
    status?: boolean
    order?: boolean
    amoutMoney?: boolean
    address?: boolean
    created_at?: boolean
    pixType?: boolean
    paymentVoucher?: boolean
    dataCompanies?: boolean | CompaniesArgs
    companiesId?: boolean
    client?: boolean | ClientsArgs
    clientsId?: boolean
  }


  export type OrdersInclude = {
    dataCompanies?: boolean | CompaniesArgs
    client?: boolean | ClientsArgs
  }

  export type OrdersGetPayload<S extends boolean | null | undefined | OrdersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Orders :
    S extends undefined ? never :
    S extends { include: any } & (OrdersArgs | OrdersFindManyArgs)
    ? Orders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dataCompanies' ? CompaniesGetPayload<S['include'][P]> :
        P extends 'client' ? ClientsGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OrdersArgs | OrdersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dataCompanies' ? CompaniesGetPayload<S['select'][P]> :
        P extends 'client' ? ClientsGetPayload<S['select'][P]> :  P extends keyof Orders ? Orders[P] : never
  } 
      : Orders


  type OrdersCountArgs = 
    Omit<OrdersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface OrdersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orders that matches the filter.
     * @param {OrdersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrdersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Orders'> extends True ? Prisma__OrdersClient<OrdersGetPayload<T>> : Prisma__OrdersClient<OrdersGetPayload<T> | null, null>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrdersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrdersFindUniqueOrThrowArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrdersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Orders'> extends True ? Prisma__OrdersClient<OrdersGetPayload<T>> : Prisma__OrdersClient<OrdersGetPayload<T> | null, null>

    /**
     * Find the first Orders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrdersFindFirstOrThrowArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrdersFindManyArgs>(
      args?: SelectSubset<T, OrdersFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrdersGetPayload<T>>>

    /**
     * Create a Orders.
     * @param {OrdersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends OrdersCreateArgs>(
      args: SelectSubset<T, OrdersCreateArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {OrdersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrdersCreateManyArgs>(
      args?: SelectSubset<T, OrdersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {OrdersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends OrdersDeleteArgs>(
      args: SelectSubset<T, OrdersDeleteArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Update one Orders.
     * @param {OrdersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdersUpdateArgs>(
      args: SelectSubset<T, OrdersUpdateArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {OrdersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdersDeleteManyArgs>(
      args?: SelectSubset<T, OrdersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdersUpdateManyArgs>(
      args: SelectSubset<T, OrdersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {OrdersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends OrdersUpsertArgs>(
      args: SelectSubset<T, OrdersUpsertArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrdersCountArgs>(
      args?: Subset<T, OrdersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrdersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dataCompanies<T extends CompaniesArgs= {}>(args?: Subset<T, CompaniesArgs>): Prisma__CompaniesClient<CompaniesGetPayload<T> | Null>;

    client<T extends ClientsArgs= {}>(args?: Subset<T, ClientsArgs>): Prisma__ClientsClient<ClientsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Orders base type for findUnique actions
   */
  export type OrdersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where: OrdersWhereUniqueInput
  }

  /**
   * Orders findUnique
   */
  export interface OrdersFindUniqueArgs extends OrdersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Orders findUniqueOrThrow
   */
  export type OrdersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders base type for findFirst actions
   */
  export type OrdersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }

  /**
   * Orders findFirst
   */
  export interface OrdersFindFirstArgs extends OrdersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Orders findFirstOrThrow
   */
  export type OrdersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * Orders findMany
   */
  export type OrdersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * Orders create
   */
  export type OrdersCreateArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * The data needed to create a Orders.
     */
    data: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
  }


  /**
   * Orders createMany
   */
  export type OrdersCreateManyArgs = {
    /**
     * The data used to create many Orders.
     */
    data: Enumerable<OrdersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Orders update
   */
  export type OrdersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * The data needed to update a Orders.
     */
    data: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
    /**
     * Choose, which Orders to update.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders updateMany
   */
  export type OrdersUpdateManyArgs = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrdersWhereInput
  }


  /**
   * Orders upsert
   */
  export type OrdersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * The filter to search for the Orders to update in case it exists.
     */
    where: OrdersWhereUniqueInput
    /**
     * In case the Orders found by the `where` argument doesn't exist, create a new Orders with this data.
     */
    create: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
    /**
     * In case the Orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
  }


  /**
   * Orders delete
   */
  export type OrdersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
    /**
     * Filter which Orders to delete.
     */
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders deleteMany
   */
  export type OrdersDeleteManyArgs = {
    /**
     * Filter which Orders to delete
     */
    where?: OrdersWhereInput
  }


  /**
   * Orders without action
   */
  export type OrdersArgs = {
    /**
     * Select specific fields to fetch from the Orders
     */
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrdersInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    email: string | null
    name_company: string | null
    companyId: string | null
    backgroundColor: string | null
    imgProfile: string | null
    created_at: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name_company: string | null
    companyId: string | null
    backgroundColor: string | null
    imgProfile: string | null
    created_at: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    email: number
    name_company: number
    companyId: number
    backgroundColor: number
    imgProfile: number
    created_at: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    email?: true
    name_company?: true
    companyId?: true
    backgroundColor?: true
    imgProfile?: true
    created_at?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    email?: true
    name_company?: true
    companyId?: true
    backgroundColor?: true
    imgProfile?: true
    created_at?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    email?: true
    name_company?: true
    companyId?: true
    backgroundColor?: true
    imgProfile?: true
    created_at?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    email: string
    name_company: string | null
    companyId: string | null
    backgroundColor: string | null
    imgProfile: string | null
    created_at: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    email?: boolean
    name_company?: boolean
    companyId?: boolean
    backgroundColor?: boolean
    imgProfile?: boolean
    created_at?: boolean
  }


  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
  }



  /**
   * Model OrdersFinished
   */


  export type AggregateOrdersFinished = {
    _count: OrdersFinishedCountAggregateOutputType | null
    _avg: OrdersFinishedAvgAggregateOutputType | null
    _sum: OrdersFinishedSumAggregateOutputType | null
    _min: OrdersFinishedMinAggregateOutputType | null
    _max: OrdersFinishedMaxAggregateOutputType | null
  }

  export type OrdersFinishedAvgAggregateOutputType = {
    amountOrders: number | null
    amountvalue: number | null
  }

  export type OrdersFinishedSumAggregateOutputType = {
    amountOrders: number | null
    amountvalue: number | null
  }

  export type OrdersFinishedMinAggregateOutputType = {
    id: string | null
    date: string | null
    amountOrders: number | null
    amountvalue: number | null
    companyId: string | null
    created_at: Date | null
  }

  export type OrdersFinishedMaxAggregateOutputType = {
    id: string | null
    date: string | null
    amountOrders: number | null
    amountvalue: number | null
    companyId: string | null
    created_at: Date | null
  }

  export type OrdersFinishedCountAggregateOutputType = {
    id: number
    date: number
    amountOrders: number
    amountvalue: number
    companyId: number
    created_at: number
    _all: number
  }


  export type OrdersFinishedAvgAggregateInputType = {
    amountOrders?: true
    amountvalue?: true
  }

  export type OrdersFinishedSumAggregateInputType = {
    amountOrders?: true
    amountvalue?: true
  }

  export type OrdersFinishedMinAggregateInputType = {
    id?: true
    date?: true
    amountOrders?: true
    amountvalue?: true
    companyId?: true
    created_at?: true
  }

  export type OrdersFinishedMaxAggregateInputType = {
    id?: true
    date?: true
    amountOrders?: true
    amountvalue?: true
    companyId?: true
    created_at?: true
  }

  export type OrdersFinishedCountAggregateInputType = {
    id?: true
    date?: true
    amountOrders?: true
    amountvalue?: true
    companyId?: true
    created_at?: true
    _all?: true
  }

  export type OrdersFinishedAggregateArgs = {
    /**
     * Filter which OrdersFinished to aggregate.
     */
    where?: OrdersFinishedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersFinisheds to fetch.
     */
    orderBy?: Enumerable<OrdersFinishedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrdersFinishedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersFinisheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersFinisheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrdersFinisheds
    **/
    _count?: true | OrdersFinishedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersFinishedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersFinishedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersFinishedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersFinishedMaxAggregateInputType
  }

  export type GetOrdersFinishedAggregateType<T extends OrdersFinishedAggregateArgs> = {
        [P in keyof T & keyof AggregateOrdersFinished]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrdersFinished[P]>
      : GetScalarType<T[P], AggregateOrdersFinished[P]>
  }




  export type OrdersFinishedGroupByArgs = {
    where?: OrdersFinishedWhereInput
    orderBy?: Enumerable<OrdersFinishedOrderByWithAggregationInput>
    by: OrdersFinishedScalarFieldEnum[]
    having?: OrdersFinishedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersFinishedCountAggregateInputType | true
    _avg?: OrdersFinishedAvgAggregateInputType
    _sum?: OrdersFinishedSumAggregateInputType
    _min?: OrdersFinishedMinAggregateInputType
    _max?: OrdersFinishedMaxAggregateInputType
  }


  export type OrdersFinishedGroupByOutputType = {
    id: string
    date: string
    amountOrders: number
    amountvalue: number
    companyId: string
    created_at: Date
    _count: OrdersFinishedCountAggregateOutputType | null
    _avg: OrdersFinishedAvgAggregateOutputType | null
    _sum: OrdersFinishedSumAggregateOutputType | null
    _min: OrdersFinishedMinAggregateOutputType | null
    _max: OrdersFinishedMaxAggregateOutputType | null
  }

  type GetOrdersFinishedGroupByPayload<T extends OrdersFinishedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrdersFinishedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersFinishedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersFinishedGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersFinishedGroupByOutputType[P]>
        }
      >
    >


  export type OrdersFinishedSelect = {
    id?: boolean
    date?: boolean
    amountOrders?: boolean
    amountvalue?: boolean
    companyId?: boolean
    created_at?: boolean
  }


  export type OrdersFinishedGetPayload<S extends boolean | null | undefined | OrdersFinishedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrdersFinished :
    S extends undefined ? never :
    S extends { include: any } & (OrdersFinishedArgs | OrdersFinishedFindManyArgs)
    ? OrdersFinished 
    : S extends { select: any } & (OrdersFinishedArgs | OrdersFinishedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrdersFinished ? OrdersFinished[P] : never
  } 
      : OrdersFinished


  type OrdersFinishedCountArgs = 
    Omit<OrdersFinishedFindManyArgs, 'select' | 'include'> & {
      select?: OrdersFinishedCountAggregateInputType | true
    }

  export interface OrdersFinishedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one OrdersFinished that matches the filter.
     * @param {OrdersFinishedFindUniqueArgs} args - Arguments to find a OrdersFinished
     * @example
     * // Get one OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdersFinishedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrdersFinishedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrdersFinished'> extends True ? Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>> : Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T> | null, null>

    /**
     * Find one OrdersFinished that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrdersFinishedFindUniqueOrThrowArgs} args - Arguments to find a OrdersFinished
     * @example
     * // Get one OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdersFinishedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrdersFinishedFindUniqueOrThrowArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Find the first OrdersFinished that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedFindFirstArgs} args - Arguments to find a OrdersFinished
     * @example
     * // Get one OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdersFinishedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrdersFinishedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrdersFinished'> extends True ? Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>> : Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T> | null, null>

    /**
     * Find the first OrdersFinished that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedFindFirstOrThrowArgs} args - Arguments to find a OrdersFinished
     * @example
     * // Get one OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdersFinishedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrdersFinishedFindFirstOrThrowArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Find zero or more OrdersFinisheds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrdersFinisheds
     * const ordersFinisheds = await prisma.ordersFinished.findMany()
     * 
     * // Get first 10 OrdersFinisheds
     * const ordersFinisheds = await prisma.ordersFinished.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersFinishedWithIdOnly = await prisma.ordersFinished.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrdersFinishedFindManyArgs>(
      args?: SelectSubset<T, OrdersFinishedFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrdersFinishedGetPayload<T>>>

    /**
     * Create a OrdersFinished.
     * @param {OrdersFinishedCreateArgs} args - Arguments to create a OrdersFinished.
     * @example
     * // Create one OrdersFinished
     * const OrdersFinished = await prisma.ordersFinished.create({
     *   data: {
     *     // ... data to create a OrdersFinished
     *   }
     * })
     * 
    **/
    create<T extends OrdersFinishedCreateArgs>(
      args: SelectSubset<T, OrdersFinishedCreateArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Create many OrdersFinisheds.
     *     @param {OrdersFinishedCreateManyArgs} args - Arguments to create many OrdersFinisheds.
     *     @example
     *     // Create many OrdersFinisheds
     *     const ordersFinished = await prisma.ordersFinished.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrdersFinishedCreateManyArgs>(
      args?: SelectSubset<T, OrdersFinishedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrdersFinished.
     * @param {OrdersFinishedDeleteArgs} args - Arguments to delete one OrdersFinished.
     * @example
     * // Delete one OrdersFinished
     * const OrdersFinished = await prisma.ordersFinished.delete({
     *   where: {
     *     // ... filter to delete one OrdersFinished
     *   }
     * })
     * 
    **/
    delete<T extends OrdersFinishedDeleteArgs>(
      args: SelectSubset<T, OrdersFinishedDeleteArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Update one OrdersFinished.
     * @param {OrdersFinishedUpdateArgs} args - Arguments to update one OrdersFinished.
     * @example
     * // Update one OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdersFinishedUpdateArgs>(
      args: SelectSubset<T, OrdersFinishedUpdateArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Delete zero or more OrdersFinisheds.
     * @param {OrdersFinishedDeleteManyArgs} args - Arguments to filter OrdersFinisheds to delete.
     * @example
     * // Delete a few OrdersFinisheds
     * const { count } = await prisma.ordersFinished.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdersFinishedDeleteManyArgs>(
      args?: SelectSubset<T, OrdersFinishedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrdersFinisheds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrdersFinisheds
     * const ordersFinished = await prisma.ordersFinished.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdersFinishedUpdateManyArgs>(
      args: SelectSubset<T, OrdersFinishedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrdersFinished.
     * @param {OrdersFinishedUpsertArgs} args - Arguments to update or create a OrdersFinished.
     * @example
     * // Update or create a OrdersFinished
     * const ordersFinished = await prisma.ordersFinished.upsert({
     *   create: {
     *     // ... data to create a OrdersFinished
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrdersFinished we want to update
     *   }
     * })
    **/
    upsert<T extends OrdersFinishedUpsertArgs>(
      args: SelectSubset<T, OrdersFinishedUpsertArgs>
    ): Prisma__OrdersFinishedClient<OrdersFinishedGetPayload<T>>

    /**
     * Count the number of OrdersFinisheds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedCountArgs} args - Arguments to filter OrdersFinisheds to count.
     * @example
     * // Count the number of OrdersFinisheds
     * const count = await prisma.ordersFinished.count({
     *   where: {
     *     // ... the filter for the OrdersFinisheds we want to count
     *   }
     * })
    **/
    count<T extends OrdersFinishedCountArgs>(
      args?: Subset<T, OrdersFinishedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersFinishedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrdersFinished.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersFinishedAggregateArgs>(args: Subset<T, OrdersFinishedAggregateArgs>): Prisma.PrismaPromise<GetOrdersFinishedAggregateType<T>>

    /**
     * Group by OrdersFinished.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFinishedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersFinishedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersFinishedGroupByArgs['orderBy'] }
        : { orderBy?: OrdersFinishedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersFinishedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersFinishedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OrdersFinished.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrdersFinishedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OrdersFinished base type for findUnique actions
   */
  export type OrdersFinishedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter, which OrdersFinished to fetch.
     */
    where: OrdersFinishedWhereUniqueInput
  }

  /**
   * OrdersFinished findUnique
   */
  export interface OrdersFinishedFindUniqueArgs extends OrdersFinishedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OrdersFinished findUniqueOrThrow
   */
  export type OrdersFinishedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter, which OrdersFinished to fetch.
     */
    where: OrdersFinishedWhereUniqueInput
  }


  /**
   * OrdersFinished base type for findFirst actions
   */
  export type OrdersFinishedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter, which OrdersFinished to fetch.
     */
    where?: OrdersFinishedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersFinisheds to fetch.
     */
    orderBy?: Enumerable<OrdersFinishedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdersFinisheds.
     */
    cursor?: OrdersFinishedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersFinisheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersFinisheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdersFinisheds.
     */
    distinct?: Enumerable<OrdersFinishedScalarFieldEnum>
  }

  /**
   * OrdersFinished findFirst
   */
  export interface OrdersFinishedFindFirstArgs extends OrdersFinishedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OrdersFinished findFirstOrThrow
   */
  export type OrdersFinishedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter, which OrdersFinished to fetch.
     */
    where?: OrdersFinishedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersFinisheds to fetch.
     */
    orderBy?: Enumerable<OrdersFinishedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrdersFinisheds.
     */
    cursor?: OrdersFinishedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersFinisheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersFinisheds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrdersFinisheds.
     */
    distinct?: Enumerable<OrdersFinishedScalarFieldEnum>
  }


  /**
   * OrdersFinished findMany
   */
  export type OrdersFinishedFindManyArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter, which OrdersFinisheds to fetch.
     */
    where?: OrdersFinishedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrdersFinisheds to fetch.
     */
    orderBy?: Enumerable<OrdersFinishedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrdersFinisheds.
     */
    cursor?: OrdersFinishedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrdersFinisheds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrdersFinisheds.
     */
    skip?: number
    distinct?: Enumerable<OrdersFinishedScalarFieldEnum>
  }


  /**
   * OrdersFinished create
   */
  export type OrdersFinishedCreateArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * The data needed to create a OrdersFinished.
     */
    data: XOR<OrdersFinishedCreateInput, OrdersFinishedUncheckedCreateInput>
  }


  /**
   * OrdersFinished createMany
   */
  export type OrdersFinishedCreateManyArgs = {
    /**
     * The data used to create many OrdersFinisheds.
     */
    data: Enumerable<OrdersFinishedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OrdersFinished update
   */
  export type OrdersFinishedUpdateArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * The data needed to update a OrdersFinished.
     */
    data: XOR<OrdersFinishedUpdateInput, OrdersFinishedUncheckedUpdateInput>
    /**
     * Choose, which OrdersFinished to update.
     */
    where: OrdersFinishedWhereUniqueInput
  }


  /**
   * OrdersFinished updateMany
   */
  export type OrdersFinishedUpdateManyArgs = {
    /**
     * The data used to update OrdersFinisheds.
     */
    data: XOR<OrdersFinishedUpdateManyMutationInput, OrdersFinishedUncheckedUpdateManyInput>
    /**
     * Filter which OrdersFinisheds to update
     */
    where?: OrdersFinishedWhereInput
  }


  /**
   * OrdersFinished upsert
   */
  export type OrdersFinishedUpsertArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * The filter to search for the OrdersFinished to update in case it exists.
     */
    where: OrdersFinishedWhereUniqueInput
    /**
     * In case the OrdersFinished found by the `where` argument doesn't exist, create a new OrdersFinished with this data.
     */
    create: XOR<OrdersFinishedCreateInput, OrdersFinishedUncheckedCreateInput>
    /**
     * In case the OrdersFinished was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrdersFinishedUpdateInput, OrdersFinishedUncheckedUpdateInput>
  }


  /**
   * OrdersFinished delete
   */
  export type OrdersFinishedDeleteArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
    /**
     * Filter which OrdersFinished to delete.
     */
    where: OrdersFinishedWhereUniqueInput
  }


  /**
   * OrdersFinished deleteMany
   */
  export type OrdersFinishedDeleteManyArgs = {
    /**
     * Filter which OrdersFinisheds to delete
     */
    where?: OrdersFinishedWhereInput
  }


  /**
   * OrdersFinished without action
   */
  export type OrdersFinishedArgs = {
    /**
     * Select specific fields to fetch from the OrdersFinished
     */
    select?: OrdersFinishedSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phone: 'phone',
    created_at: 'created_at'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    id: 'id',
    name_company: 'name_company',
    cnpj: 'cnpj',
    payments_methods: 'payments_methods',
    imgProfile: 'imgProfile',
    backgroundColor: 'backgroundColor',
    isSubiscriber: 'isSubiscriber',
    phone: 'phone',
    email: 'email',
    password: 'password',
    address: 'address',
    pixKey: 'pixKey',
    created_at: 'created_at'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const MenuOfCompaniesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    categoria: 'categoria',
    price: 'price',
    weight: 'weight',
    amount: 'amount',
    companiesId: 'companiesId',
    description: 'description',
    created_at: 'created_at'
  };

  export type MenuOfCompaniesScalarFieldEnum = (typeof MenuOfCompaniesScalarFieldEnum)[keyof typeof MenuOfCompaniesScalarFieldEnum]


  export const OrdersFinishedScalarFieldEnum: {
    id: 'id',
    date: 'date',
    amountOrders: 'amountOrders',
    amountvalue: 'amountvalue',
    companyId: 'companyId',
    created_at: 'created_at'
  };

  export type OrdersFinishedScalarFieldEnum = (typeof OrdersFinishedScalarFieldEnum)[keyof typeof OrdersFinishedScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    payment_method: 'payment_method',
    status: 'status',
    order: 'order',
    amoutMoney: 'amoutMoney',
    address: 'address',
    created_at: 'created_at',
    pixType: 'pixType',
    paymentVoucher: 'paymentVoucher',
    companiesId: 'companiesId',
    clientsId: 'clientsId'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name_company: 'name_company',
    companyId: 'companyId',
    backgroundColor: 'backgroundColor',
    imgProfile: 'imgProfile',
    created_at: 'created_at'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type CompaniesWhereInput = {
    AND?: Enumerable<CompaniesWhereInput>
    OR?: Enumerable<CompaniesWhereInput>
    NOT?: Enumerable<CompaniesWhereInput>
    id?: StringFilter | string
    name_company?: StringFilter | string
    cnpj?: StringNullableFilter | string | null
    payments_methods?: StringNullableListFilter
    imgProfile?: StringNullableFilter | string | null
    backgroundColor?: StringNullableFilter | string | null
    isSubiscriber?: BoolFilter | boolean
    phone?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    address?: StringFilter | string
    pixKey?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    Menu?: MenuOfCompaniesListRelationFilter
    Orders?: OrdersListRelationFilter
  }

  export type CompaniesOrderByWithRelationInput = {
    id?: SortOrder
    name_company?: SortOrder
    cnpj?: SortOrder
    payments_methods?: SortOrder
    imgProfile?: SortOrder
    backgroundColor?: SortOrder
    isSubiscriber?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    pixKey?: SortOrder
    created_at?: SortOrder
    Menu?: MenuOfCompaniesOrderByRelationAggregateInput
    Orders?: OrdersOrderByRelationAggregateInput
  }

  export type CompaniesWhereUniqueInput = {
    id?: string
  }

  export type CompaniesOrderByWithAggregationInput = {
    id?: SortOrder
    name_company?: SortOrder
    cnpj?: SortOrder
    payments_methods?: SortOrder
    imgProfile?: SortOrder
    backgroundColor?: SortOrder
    isSubiscriber?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    pixKey?: SortOrder
    created_at?: SortOrder
    _count?: CompaniesCountOrderByAggregateInput
    _max?: CompaniesMaxOrderByAggregateInput
    _min?: CompaniesMinOrderByAggregateInput
  }

  export type CompaniesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompaniesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name_company?: StringWithAggregatesFilter | string
    cnpj?: StringNullableWithAggregatesFilter | string | null
    payments_methods?: StringNullableListFilter
    imgProfile?: StringNullableWithAggregatesFilter | string | null
    backgroundColor?: StringNullableWithAggregatesFilter | string | null
    isSubiscriber?: BoolWithAggregatesFilter | boolean
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    pixKey?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MenuOfCompaniesWhereInput = {
    AND?: Enumerable<MenuOfCompaniesWhereInput>
    OR?: Enumerable<MenuOfCompaniesWhereInput>
    NOT?: Enumerable<MenuOfCompaniesWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    categoria?: StringNullableFilter | string | null
    price?: StringFilter | string
    weight?: StringNullableFilter | string | null
    amount?: StringNullableFilter | string | null
    dataCompanies?: XOR<CompaniesRelationFilter, CompaniesWhereInput>
    companiesId?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type MenuOfCompaniesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    categoria?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    amount?: SortOrder
    dataCompanies?: CompaniesOrderByWithRelationInput
    companiesId?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type MenuOfCompaniesWhereUniqueInput = {
    id?: string
  }

  export type MenuOfCompaniesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    categoria?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    amount?: SortOrder
    companiesId?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    _count?: MenuOfCompaniesCountOrderByAggregateInput
    _max?: MenuOfCompaniesMaxOrderByAggregateInput
    _min?: MenuOfCompaniesMinOrderByAggregateInput
  }

  export type MenuOfCompaniesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MenuOfCompaniesScalarWhereWithAggregatesInput>
    OR?: Enumerable<MenuOfCompaniesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MenuOfCompaniesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    categoria?: StringNullableWithAggregatesFilter | string | null
    price?: StringWithAggregatesFilter | string
    weight?: StringNullableWithAggregatesFilter | string | null
    amount?: StringNullableWithAggregatesFilter | string | null
    companiesId?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClientsWhereInput = {
    AND?: Enumerable<ClientsWhereInput>
    OR?: Enumerable<ClientsWhereInput>
    NOT?: Enumerable<ClientsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    phone?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    Orders?: OrdersListRelationFilter
  }

  export type ClientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    Orders?: OrdersOrderByRelationAggregateInput
  }

  export type ClientsWhereUniqueInput = {
    id?: string
  }

  export type ClientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    _count?: ClientsCountOrderByAggregateInput
    _avg?: ClientsAvgOrderByAggregateInput
    _max?: ClientsMaxOrderByAggregateInput
    _min?: ClientsMinOrderByAggregateInput
    _sum?: ClientsSumOrderByAggregateInput
  }

  export type ClientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    phone?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OrdersWhereInput = {
    AND?: Enumerable<OrdersWhereInput>
    OR?: Enumerable<OrdersWhereInput>
    NOT?: Enumerable<OrdersWhereInput>
    id?: StringFilter | string
    amount?: StringFilter | string
    payment_method?: StringFilter | string
    status?: StringFilter | string
    order?: JsonNullableListFilter
    amoutMoney?: StringFilter | string
    address?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    pixType?: StringNullableFilter | string | null
    paymentVoucher?: StringNullableFilter | string | null
    dataCompanies?: XOR<CompaniesRelationFilter, CompaniesWhereInput>
    companiesId?: StringFilter | string
    client?: XOR<ClientsRelationFilter, ClientsWhereInput>
    clientsId?: StringFilter | string
  }

  export type OrdersOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    order?: SortOrder
    amoutMoney?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    pixType?: SortOrder
    paymentVoucher?: SortOrder
    dataCompanies?: CompaniesOrderByWithRelationInput
    companiesId?: SortOrder
    client?: ClientsOrderByWithRelationInput
    clientsId?: SortOrder
  }

  export type OrdersWhereUniqueInput = {
    id?: string
  }

  export type OrdersOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    order?: SortOrder
    amoutMoney?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    pixType?: SortOrder
    paymentVoucher?: SortOrder
    companiesId?: SortOrder
    clientsId?: SortOrder
    _count?: OrdersCountOrderByAggregateInput
    _max?: OrdersMaxOrderByAggregateInput
    _min?: OrdersMinOrderByAggregateInput
  }

  export type OrdersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    amount?: StringWithAggregatesFilter | string
    payment_method?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    order?: JsonNullableListFilter
    amoutMoney?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    pixType?: StringNullableWithAggregatesFilter | string | null
    paymentVoucher?: StringNullableWithAggregatesFilter | string | null
    companiesId?: StringWithAggregatesFilter | string
    clientsId?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name_company?: StringNullableFilter | string | null
    companyId?: StringNullableFilter | string | null
    backgroundColor?: StringNullableFilter | string | null
    imgProfile?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name_company?: SortOrder
    companyId?: SortOrder
    backgroundColor?: SortOrder
    imgProfile?: SortOrder
    created_at?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name_company?: SortOrder
    companyId?: SortOrder
    backgroundColor?: SortOrder
    imgProfile?: SortOrder
    created_at?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name_company?: StringNullableWithAggregatesFilter | string | null
    companyId?: StringNullableWithAggregatesFilter | string | null
    backgroundColor?: StringNullableWithAggregatesFilter | string | null
    imgProfile?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OrdersFinishedWhereInput = {
    AND?: Enumerable<OrdersFinishedWhereInput>
    OR?: Enumerable<OrdersFinishedWhereInput>
    NOT?: Enumerable<OrdersFinishedWhereInput>
    id?: StringFilter | string
    date?: StringFilter | string
    amountOrders?: IntFilter | number
    amountvalue?: IntFilter | number
    companyId?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type OrdersFinishedOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    amountOrders?: SortOrder
    amountvalue?: SortOrder
    companyId?: SortOrder
    created_at?: SortOrder
  }

  export type OrdersFinishedWhereUniqueInput = {
    id?: string
  }

  export type OrdersFinishedOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    amountOrders?: SortOrder
    amountvalue?: SortOrder
    companyId?: SortOrder
    created_at?: SortOrder
    _count?: OrdersFinishedCountOrderByAggregateInput
    _avg?: OrdersFinishedAvgOrderByAggregateInput
    _max?: OrdersFinishedMaxOrderByAggregateInput
    _min?: OrdersFinishedMinOrderByAggregateInput
    _sum?: OrdersFinishedSumOrderByAggregateInput
  }

  export type OrdersFinishedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrdersFinishedScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrdersFinishedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrdersFinishedScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: StringWithAggregatesFilter | string
    amountOrders?: IntWithAggregatesFilter | number
    amountvalue?: IntWithAggregatesFilter | number
    companyId?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CompaniesCreateInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Menu?: MenuOfCompaniesCreateNestedManyWithoutDataCompaniesInput
    Orders?: OrdersCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesUncheckedCreateInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Menu?: MenuOfCompaniesUncheckedCreateNestedManyWithoutDataCompaniesInput
    Orders?: OrdersUncheckedCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuOfCompaniesUpdateManyWithoutDataCompaniesNestedInput
    Orders?: OrdersUpdateManyWithoutDataCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuOfCompaniesUncheckedUpdateManyWithoutDataCompaniesNestedInput
    Orders?: OrdersUncheckedUpdateManyWithoutDataCompaniesNestedInput
  }

  export type CompaniesCreateManyInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
  }

  export type CompaniesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompaniesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesCreateInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    dataCompanies: CompaniesCreateNestedOneWithoutMenuInput
    description: string
    created_at?: Date | string
  }

  export type MenuOfCompaniesUncheckedCreateInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    companiesId: string
    description: string
    created_at?: Date | string
  }

  export type MenuOfCompaniesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    dataCompanies?: CompaniesUpdateOneRequiredWithoutMenuNestedInput
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    companiesId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesCreateManyInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    companiesId: string
    description: string
    created_at?: Date | string
  }

  export type MenuOfCompaniesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    companiesId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientsCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: number
    created_at?: Date | string
    Orders?: OrdersCreateNestedManyWithoutClientInput
  }

  export type ClientsUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: number
    created_at?: Date | string
    Orders?: OrdersUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrdersUpdateManyWithoutClientNestedInput
  }

  export type ClientsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrdersUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientsCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: number
    created_at?: Date | string
  }

  export type ClientsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersCreateInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    dataCompanies: CompaniesCreateNestedOneWithoutOrdersInput
    client: ClientsCreateNestedOneWithoutOrdersInput
  }

  export type OrdersUncheckedCreateInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    companiesId: string
    clientsId: string
  }

  export type OrdersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    dataCompanies?: CompaniesUpdateOneRequiredWithoutOrdersNestedInput
    client?: ClientsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    companiesId?: StringFieldUpdateOperationsInput | string
    clientsId?: StringFieldUpdateOperationsInput | string
  }

  export type OrdersCreateManyInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    companiesId: string
    clientsId: string
  }

  export type OrdersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrdersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    companiesId?: StringFieldUpdateOperationsInput | string
    clientsId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    email: string
    name_company?: string | null
    companyId?: string | null
    backgroundColor?: string | null
    imgProfile?: string | null
    created_at?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    email: string
    name_company?: string | null
    companyId?: string | null
    backgroundColor?: string | null
    imgProfile?: string | null
    created_at?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name_company?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name_company?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    email: string
    name_company?: string | null
    companyId?: string | null
    backgroundColor?: string | null
    imgProfile?: string | null
    created_at?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name_company?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name_company?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersFinishedCreateInput = {
    id?: string
    date: string
    amountOrders: number
    amountvalue: number
    companyId: string
    created_at?: Date | string
  }

  export type OrdersFinishedUncheckedCreateInput = {
    id?: string
    date: string
    amountOrders: number
    amountvalue: number
    companyId: string
    created_at?: Date | string
  }

  export type OrdersFinishedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    amountOrders?: IntFieldUpdateOperationsInput | number
    amountvalue?: IntFieldUpdateOperationsInput | number
    companyId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersFinishedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    amountOrders?: IntFieldUpdateOperationsInput | number
    amountvalue?: IntFieldUpdateOperationsInput | number
    companyId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersFinishedCreateManyInput = {
    id?: string
    date: string
    amountOrders: number
    amountvalue: number
    companyId: string
    created_at?: Date | string
  }

  export type OrdersFinishedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    amountOrders?: IntFieldUpdateOperationsInput | number
    amountvalue?: IntFieldUpdateOperationsInput | number
    companyId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersFinishedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    amountOrders?: IntFieldUpdateOperationsInput | number
    amountvalue?: IntFieldUpdateOperationsInput | number
    companyId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MenuOfCompaniesListRelationFilter = {
    every?: MenuOfCompaniesWhereInput
    some?: MenuOfCompaniesWhereInput
    none?: MenuOfCompaniesWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: OrdersWhereInput
    some?: OrdersWhereInput
    none?: OrdersWhereInput
  }

  export type MenuOfCompaniesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompaniesCountOrderByAggregateInput = {
    id?: SortOrder
    name_company?: SortOrder
    cnpj?: SortOrder
    payments_methods?: SortOrder
    imgProfile?: SortOrder
    backgroundColor?: SortOrder
    isSubiscriber?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    pixKey?: SortOrder
    created_at?: SortOrder
  }

  export type CompaniesMaxOrderByAggregateInput = {
    id?: SortOrder
    name_company?: SortOrder
    cnpj?: SortOrder
    imgProfile?: SortOrder
    backgroundColor?: SortOrder
    isSubiscriber?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    pixKey?: SortOrder
    created_at?: SortOrder
  }

  export type CompaniesMinOrderByAggregateInput = {
    id?: SortOrder
    name_company?: SortOrder
    cnpj?: SortOrder
    imgProfile?: SortOrder
    backgroundColor?: SortOrder
    isSubiscriber?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    pixKey?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CompaniesRelationFilter = {
    is?: CompaniesWhereInput
    isNot?: CompaniesWhereInput
  }

  export type MenuOfCompaniesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoria?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    amount?: SortOrder
    companiesId?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type MenuOfCompaniesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoria?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    amount?: SortOrder
    companiesId?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type MenuOfCompaniesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoria?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    amount?: SortOrder
    companiesId?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ClientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
  }

  export type ClientsAvgOrderByAggregateInput = {
    phone?: SortOrder
  }

  export type ClientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
  }

  export type ClientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
  }

  export type ClientsSumOrderByAggregateInput = {
    phone?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }
  export type JsonNullableListFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase>, Exclude<keyof Required<JsonNullableListFilterBase>, 'path'>>,
        Required<JsonNullableListFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase>, 'path'>>

  export type JsonNullableListFilterBase = {
    equals?: Enumerable<InputJsonValue> | null
    has?: InputJsonValue | null
    hasEvery?: Enumerable<InputJsonValue>
    hasSome?: Enumerable<InputJsonValue>
    isEmpty?: boolean
  }

  export type ClientsRelationFilter = {
    is?: ClientsWhereInput
    isNot?: ClientsWhereInput
  }

  export type OrdersCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    order?: SortOrder
    amoutMoney?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    pixType?: SortOrder
    paymentVoucher?: SortOrder
    companiesId?: SortOrder
    clientsId?: SortOrder
  }

  export type OrdersMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    amoutMoney?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    pixType?: SortOrder
    paymentVoucher?: SortOrder
    companiesId?: SortOrder
    clientsId?: SortOrder
  }

  export type OrdersMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    amoutMoney?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    pixType?: SortOrder
    paymentVoucher?: SortOrder
    companiesId?: SortOrder
    clientsId?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name_company?: SortOrder
    companyId?: SortOrder
    backgroundColor?: SortOrder
    imgProfile?: SortOrder
    created_at?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name_company?: SortOrder
    companyId?: SortOrder
    backgroundColor?: SortOrder
    imgProfile?: SortOrder
    created_at?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name_company?: SortOrder
    companyId?: SortOrder
    backgroundColor?: SortOrder
    imgProfile?: SortOrder
    created_at?: SortOrder
  }

  export type OrdersFinishedCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amountOrders?: SortOrder
    amountvalue?: SortOrder
    companyId?: SortOrder
    created_at?: SortOrder
  }

  export type OrdersFinishedAvgOrderByAggregateInput = {
    amountOrders?: SortOrder
    amountvalue?: SortOrder
  }

  export type OrdersFinishedMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amountOrders?: SortOrder
    amountvalue?: SortOrder
    companyId?: SortOrder
    created_at?: SortOrder
  }

  export type OrdersFinishedMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amountOrders?: SortOrder
    amountvalue?: SortOrder
    companyId?: SortOrder
    created_at?: SortOrder
  }

  export type OrdersFinishedSumOrderByAggregateInput = {
    amountOrders?: SortOrder
    amountvalue?: SortOrder
  }

  export type CompaniesCreatepayments_methodsInput = {
    set: Enumerable<string>
  }

  export type MenuOfCompaniesCreateNestedManyWithoutDataCompaniesInput = {
    create?: XOR<Enumerable<MenuOfCompaniesCreateWithoutDataCompaniesInput>, Enumerable<MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<MenuOfCompaniesCreateOrConnectWithoutDataCompaniesInput>
    createMany?: MenuOfCompaniesCreateManyDataCompaniesInputEnvelope
    connect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
  }

  export type OrdersCreateNestedManyWithoutDataCompaniesInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutDataCompaniesInput>, Enumerable<OrdersUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutDataCompaniesInput>
    createMany?: OrdersCreateManyDataCompaniesInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type MenuOfCompaniesUncheckedCreateNestedManyWithoutDataCompaniesInput = {
    create?: XOR<Enumerable<MenuOfCompaniesCreateWithoutDataCompaniesInput>, Enumerable<MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<MenuOfCompaniesCreateOrConnectWithoutDataCompaniesInput>
    createMany?: MenuOfCompaniesCreateManyDataCompaniesInputEnvelope
    connect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
  }

  export type OrdersUncheckedCreateNestedManyWithoutDataCompaniesInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutDataCompaniesInput>, Enumerable<OrdersUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutDataCompaniesInput>
    createMany?: OrdersCreateManyDataCompaniesInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CompaniesUpdatepayments_methodsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MenuOfCompaniesUpdateManyWithoutDataCompaniesNestedInput = {
    create?: XOR<Enumerable<MenuOfCompaniesCreateWithoutDataCompaniesInput>, Enumerable<MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<MenuOfCompaniesCreateOrConnectWithoutDataCompaniesInput>
    upsert?: Enumerable<MenuOfCompaniesUpsertWithWhereUniqueWithoutDataCompaniesInput>
    createMany?: MenuOfCompaniesCreateManyDataCompaniesInputEnvelope
    set?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    disconnect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    delete?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    connect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    update?: Enumerable<MenuOfCompaniesUpdateWithWhereUniqueWithoutDataCompaniesInput>
    updateMany?: Enumerable<MenuOfCompaniesUpdateManyWithWhereWithoutDataCompaniesInput>
    deleteMany?: Enumerable<MenuOfCompaniesScalarWhereInput>
  }

  export type OrdersUpdateManyWithoutDataCompaniesNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutDataCompaniesInput>, Enumerable<OrdersUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutDataCompaniesInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutDataCompaniesInput>
    createMany?: OrdersCreateManyDataCompaniesInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutDataCompaniesInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutDataCompaniesInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type MenuOfCompaniesUncheckedUpdateManyWithoutDataCompaniesNestedInput = {
    create?: XOR<Enumerable<MenuOfCompaniesCreateWithoutDataCompaniesInput>, Enumerable<MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<MenuOfCompaniesCreateOrConnectWithoutDataCompaniesInput>
    upsert?: Enumerable<MenuOfCompaniesUpsertWithWhereUniqueWithoutDataCompaniesInput>
    createMany?: MenuOfCompaniesCreateManyDataCompaniesInputEnvelope
    set?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    disconnect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    delete?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    connect?: Enumerable<MenuOfCompaniesWhereUniqueInput>
    update?: Enumerable<MenuOfCompaniesUpdateWithWhereUniqueWithoutDataCompaniesInput>
    updateMany?: Enumerable<MenuOfCompaniesUpdateManyWithWhereWithoutDataCompaniesInput>
    deleteMany?: Enumerable<MenuOfCompaniesScalarWhereInput>
  }

  export type OrdersUncheckedUpdateManyWithoutDataCompaniesNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutDataCompaniesInput>, Enumerable<OrdersUncheckedCreateWithoutDataCompaniesInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutDataCompaniesInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutDataCompaniesInput>
    createMany?: OrdersCreateManyDataCompaniesInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutDataCompaniesInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutDataCompaniesInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type CompaniesCreateNestedOneWithoutMenuInput = {
    create?: XOR<CompaniesCreateWithoutMenuInput, CompaniesUncheckedCreateWithoutMenuInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutMenuInput
    connect?: CompaniesWhereUniqueInput
  }

  export type CompaniesUpdateOneRequiredWithoutMenuNestedInput = {
    create?: XOR<CompaniesCreateWithoutMenuInput, CompaniesUncheckedCreateWithoutMenuInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutMenuInput
    upsert?: CompaniesUpsertWithoutMenuInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<CompaniesUpdateWithoutMenuInput, CompaniesUncheckedUpdateWithoutMenuInput>
  }

  export type OrdersCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutClientInput>, Enumerable<OrdersUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutClientInput>
    createMany?: OrdersCreateManyClientInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type OrdersUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutClientInput>, Enumerable<OrdersUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutClientInput>
    createMany?: OrdersCreateManyClientInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrdersUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutClientInput>, Enumerable<OrdersUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutClientInput>
    createMany?: OrdersCreateManyClientInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type OrdersUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutClientInput>, Enumerable<OrdersUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutClientInput>
    createMany?: OrdersCreateManyClientInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type OrdersCreateorderInput = {
    set: Enumerable<InputJsonValue>
  }

  export type CompaniesCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CompaniesCreateWithoutOrdersInput, CompaniesUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutOrdersInput
    connect?: CompaniesWhereUniqueInput
  }

  export type ClientsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ClientsCreateWithoutOrdersInput, ClientsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutOrdersInput
    connect?: ClientsWhereUniqueInput
  }

  export type OrdersUpdateorderInput = {
    set?: Enumerable<InputJsonValue>
    push?: InputJsonValue | Enumerable<InputJsonValue>
  }

  export type CompaniesUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CompaniesCreateWithoutOrdersInput, CompaniesUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutOrdersInput
    upsert?: CompaniesUpsertWithoutOrdersInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<CompaniesUpdateWithoutOrdersInput, CompaniesUncheckedUpdateWithoutOrdersInput>
  }

  export type ClientsUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<ClientsCreateWithoutOrdersInput, ClientsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutOrdersInput
    upsert?: ClientsUpsertWithoutOrdersInput
    connect?: ClientsWhereUniqueInput
    update?: XOR<ClientsUpdateWithoutOrdersInput, ClientsUncheckedUpdateWithoutOrdersInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type MenuOfCompaniesCreateWithoutDataCompaniesInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    description: string
    created_at?: Date | string
  }

  export type MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    description: string
    created_at?: Date | string
  }

  export type MenuOfCompaniesCreateOrConnectWithoutDataCompaniesInput = {
    where: MenuOfCompaniesWhereUniqueInput
    create: XOR<MenuOfCompaniesCreateWithoutDataCompaniesInput, MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>
  }

  export type MenuOfCompaniesCreateManyDataCompaniesInputEnvelope = {
    data: Enumerable<MenuOfCompaniesCreateManyDataCompaniesInput>
    skipDuplicates?: boolean
  }

  export type OrdersCreateWithoutDataCompaniesInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    client: ClientsCreateNestedOneWithoutOrdersInput
  }

  export type OrdersUncheckedCreateWithoutDataCompaniesInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    clientsId: string
  }

  export type OrdersCreateOrConnectWithoutDataCompaniesInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutDataCompaniesInput, OrdersUncheckedCreateWithoutDataCompaniesInput>
  }

  export type OrdersCreateManyDataCompaniesInputEnvelope = {
    data: Enumerable<OrdersCreateManyDataCompaniesInput>
    skipDuplicates?: boolean
  }

  export type MenuOfCompaniesUpsertWithWhereUniqueWithoutDataCompaniesInput = {
    where: MenuOfCompaniesWhereUniqueInput
    update: XOR<MenuOfCompaniesUpdateWithoutDataCompaniesInput, MenuOfCompaniesUncheckedUpdateWithoutDataCompaniesInput>
    create: XOR<MenuOfCompaniesCreateWithoutDataCompaniesInput, MenuOfCompaniesUncheckedCreateWithoutDataCompaniesInput>
  }

  export type MenuOfCompaniesUpdateWithWhereUniqueWithoutDataCompaniesInput = {
    where: MenuOfCompaniesWhereUniqueInput
    data: XOR<MenuOfCompaniesUpdateWithoutDataCompaniesInput, MenuOfCompaniesUncheckedUpdateWithoutDataCompaniesInput>
  }

  export type MenuOfCompaniesUpdateManyWithWhereWithoutDataCompaniesInput = {
    where: MenuOfCompaniesScalarWhereInput
    data: XOR<MenuOfCompaniesUpdateManyMutationInput, MenuOfCompaniesUncheckedUpdateManyWithoutMenuInput>
  }

  export type MenuOfCompaniesScalarWhereInput = {
    AND?: Enumerable<MenuOfCompaniesScalarWhereInput>
    OR?: Enumerable<MenuOfCompaniesScalarWhereInput>
    NOT?: Enumerable<MenuOfCompaniesScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    categoria?: StringNullableFilter | string | null
    price?: StringFilter | string
    weight?: StringNullableFilter | string | null
    amount?: StringNullableFilter | string | null
    companiesId?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type OrdersUpsertWithWhereUniqueWithoutDataCompaniesInput = {
    where: OrdersWhereUniqueInput
    update: XOR<OrdersUpdateWithoutDataCompaniesInput, OrdersUncheckedUpdateWithoutDataCompaniesInput>
    create: XOR<OrdersCreateWithoutDataCompaniesInput, OrdersUncheckedCreateWithoutDataCompaniesInput>
  }

  export type OrdersUpdateWithWhereUniqueWithoutDataCompaniesInput = {
    where: OrdersWhereUniqueInput
    data: XOR<OrdersUpdateWithoutDataCompaniesInput, OrdersUncheckedUpdateWithoutDataCompaniesInput>
  }

  export type OrdersUpdateManyWithWhereWithoutDataCompaniesInput = {
    where: OrdersScalarWhereInput
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrdersScalarWhereInput = {
    AND?: Enumerable<OrdersScalarWhereInput>
    OR?: Enumerable<OrdersScalarWhereInput>
    NOT?: Enumerable<OrdersScalarWhereInput>
    id?: StringFilter | string
    amount?: StringFilter | string
    payment_method?: StringFilter | string
    status?: StringFilter | string
    order?: JsonNullableListFilter
    amoutMoney?: StringFilter | string
    address?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    pixType?: StringNullableFilter | string | null
    paymentVoucher?: StringNullableFilter | string | null
    companiesId?: StringFilter | string
    clientsId?: StringFilter | string
  }

  export type CompaniesCreateWithoutMenuInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Orders?: OrdersCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutMenuInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Orders?: OrdersUncheckedCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutMenuInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutMenuInput, CompaniesUncheckedCreateWithoutMenuInput>
  }

  export type CompaniesUpsertWithoutMenuInput = {
    update: XOR<CompaniesUpdateWithoutMenuInput, CompaniesUncheckedUpdateWithoutMenuInput>
    create: XOR<CompaniesCreateWithoutMenuInput, CompaniesUncheckedCreateWithoutMenuInput>
  }

  export type CompaniesUpdateWithoutMenuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrdersUpdateManyWithoutDataCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutMenuInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrdersUncheckedUpdateManyWithoutDataCompaniesNestedInput
  }

  export type OrdersCreateWithoutClientInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    dataCompanies: CompaniesCreateNestedOneWithoutOrdersInput
  }

  export type OrdersUncheckedCreateWithoutClientInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    companiesId: string
  }

  export type OrdersCreateOrConnectWithoutClientInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutClientInput, OrdersUncheckedCreateWithoutClientInput>
  }

  export type OrdersCreateManyClientInputEnvelope = {
    data: Enumerable<OrdersCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type OrdersUpsertWithWhereUniqueWithoutClientInput = {
    where: OrdersWhereUniqueInput
    update: XOR<OrdersUpdateWithoutClientInput, OrdersUncheckedUpdateWithoutClientInput>
    create: XOR<OrdersCreateWithoutClientInput, OrdersUncheckedCreateWithoutClientInput>
  }

  export type OrdersUpdateWithWhereUniqueWithoutClientInput = {
    where: OrdersWhereUniqueInput
    data: XOR<OrdersUpdateWithoutClientInput, OrdersUncheckedUpdateWithoutClientInput>
  }

  export type OrdersUpdateManyWithWhereWithoutClientInput = {
    where: OrdersScalarWhereInput
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type CompaniesCreateWithoutOrdersInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Menu?: MenuOfCompaniesCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutOrdersInput = {
    id?: string
    name_company: string
    cnpj?: string | null
    payments_methods?: CompaniesCreatepayments_methodsInput | Enumerable<string>
    imgProfile?: string | null
    backgroundColor?: string | null
    isSubiscriber?: boolean
    phone: string
    email: string
    password: string
    address: string
    pixKey?: string | null
    created_at?: Date | string
    Menu?: MenuOfCompaniesUncheckedCreateNestedManyWithoutDataCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutOrdersInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutOrdersInput, CompaniesUncheckedCreateWithoutOrdersInput>
  }

  export type ClientsCreateWithoutOrdersInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: number
    created_at?: Date | string
  }

  export type ClientsUncheckedCreateWithoutOrdersInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: number
    created_at?: Date | string
  }

  export type ClientsCreateOrConnectWithoutOrdersInput = {
    where: ClientsWhereUniqueInput
    create: XOR<ClientsCreateWithoutOrdersInput, ClientsUncheckedCreateWithoutOrdersInput>
  }

  export type CompaniesUpsertWithoutOrdersInput = {
    update: XOR<CompaniesUpdateWithoutOrdersInput, CompaniesUncheckedUpdateWithoutOrdersInput>
    create: XOR<CompaniesCreateWithoutOrdersInput, CompaniesUncheckedCreateWithoutOrdersInput>
  }

  export type CompaniesUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuOfCompaniesUpdateManyWithoutDataCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name_company?: StringFieldUpdateOperationsInput | string
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    payments_methods?: CompaniesUpdatepayments_methodsInput | Enumerable<string>
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    backgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    isSubiscriber?: BoolFieldUpdateOperationsInput | boolean
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    pixKey?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Menu?: MenuOfCompaniesUncheckedUpdateManyWithoutDataCompaniesNestedInput
  }

  export type ClientsUpsertWithoutOrdersInput = {
    update: XOR<ClientsUpdateWithoutOrdersInput, ClientsUncheckedUpdateWithoutOrdersInput>
    create: XOR<ClientsCreateWithoutOrdersInput, ClientsUncheckedCreateWithoutOrdersInput>
  }

  export type ClientsUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientsUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesCreateManyDataCompaniesInput = {
    id?: string
    title: string
    categoria?: string | null
    price: string
    weight?: string | null
    amount?: string | null
    description: string
    created_at?: Date | string
  }

  export type OrdersCreateManyDataCompaniesInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    clientsId: string
  }

  export type MenuOfCompaniesUpdateWithoutDataCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesUncheckedUpdateWithoutDataCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuOfCompaniesUncheckedUpdateManyWithoutMenuInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    price?: StringFieldUpdateOperationsInput | string
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrdersUpdateWithoutDataCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    client?: ClientsUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateWithoutDataCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    clientsId?: StringFieldUpdateOperationsInput | string
  }

  export type OrdersUncheckedUpdateManyWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    clientsId?: StringFieldUpdateOperationsInput | string
  }

  export type OrdersCreateManyClientInput = {
    id?: string
    amount: string
    payment_method: string
    status: string
    order?: OrdersCreateorderInput | Enumerable<InputJsonValue>
    amoutMoney: string
    address: string
    created_at?: Date | string
    pixType?: string | null
    paymentVoucher?: string | null
    companiesId: string
  }

  export type OrdersUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    dataCompanies?: CompaniesUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    order?: OrdersUpdateorderInput | Enumerable<InputJsonValue>
    amoutMoney?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pixType?: NullableStringFieldUpdateOperationsInput | string | null
    paymentVoucher?: NullableStringFieldUpdateOperationsInput | string | null
    companiesId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}